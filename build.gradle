buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.7.0'
        classpath 'org.javamodularity:moduleplugin:1.8.8'
        classpath 'org.beryx:badass-jlink-plugin:2.24.4'
    }
}

plugins {
    id 'java-library'
    id 'application'
    id 'com.google.osdetector' version '1.7.0'
    id 'org.javamodularity.moduleplugin' version '1.8.8'
    id 'org.beryx.jlink' version '2.24.4'
}

ext.platform = osdetector.os == 'osx' ? osdetector.arch == 'aarch_64' ? 'mac-aarch64' : 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os == 'linux' ? osdetector.arch == 'aarch_64' ? 'linux-aarch64' : 'linux' : osdetector.os

normalization {
    runtimeClasspath {
        ignore('/META-INF/MANIFEST.MF')
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // JavaFX modules needed in general
    implementation "org.openjfx:javafx-base:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${platform}"

    // JavaFX modules needed for Charts and TilesFX
    implementation "org.openjfx:javafx-swing:${javafxVersion}:${platform}"

    // JavaFX modules needed for TilesFX
    implementation "org.openjfx:javafx-media:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-web:${javafxVersion}:${platform}"

    // Imports needed for Charts and TilesFX libraries
    implementation 'eu.hansolo:jdktools:17.0.3'
    implementation 'eu.hansolo:toolbox:17.0.12'
    implementation 'eu.hansolo:toolboxfx:17.0.22'
    implementation 'eu.hansolo.fx:heatmap:17.0.3'
    implementation 'eu.hansolo.fx:countries:17.0.16'

    // Imports needed for Charts library
    implementation 'eu.hansolo.fx:charts:17.1.2'

    // Imports needed for TilesFX library
    implementation 'eu.hansolo:tilesfx:17.1.1'
}

ext.moduleName = 'eu.hansolo.fx.gettingstarted'
mainClassName = '$moduleName/eu.hansolo.fx.gettingstarted.charts.DemoChartsLauncher'

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Implementation-Title': 'GettingStarted',
                'Class-Path': 'gettingstarted-17.0.0.jar',
                'Main-Class': 'eu.hansolo.fx.gettingstarted.charts.DemoChartsLauncher'
        )
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'eu.hansolo.fx.gettingstarted'
    }
}

/*
tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec) {
    jvmArgs += "--enable-preview"
}
*/

// Start DemoCharts from gradle by calling: ./gradlew DemoCharts
task DemoCharts(type: JavaExec) {
    main = "eu.hansolo.fx.gettingstarted.charts.DemoChartsLauncher"
    classpath = sourceSets.main.runtimeClasspath
}

// Start DemoTilesFX from gradle by calling: ./gradlew DemoTilesFX
task DemoTilesFX(type: JavaExec) {
    main = "eu.hansolo.fx.gettingstarted.tilesfx.DemoTilesFXLauncher"
    classpath = sourceSets.main.runtimeClasspath
}



// Fix problems with loading resources
sourceSets {
    main {
        //output.setResourcesDir(java.outputDir)
        output.resourcesDir = file('build/classes/java/main')
        java.destinationDirectory.set(file('build/classes/java/main'))
    }
}

processResources {
    from(sourceSets.main.java.srcDirs) {
        include '**/*.properties'
    }
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', mainClassName
        ]
        classpath = files()
    }
}